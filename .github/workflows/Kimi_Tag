import re
import os
import pandas as pd
from openai import OpenAI
import time

def process_ref(ref_path):
    # Load reference file
    content = open(ref_path, encoding='utf-8').readlines()
    ref = []
    for line in content:
        ref.append(line.split(" ", 1))
    df = pd.DataFrame(ref)
    df.set_index(0, inplace=True)
    try:
       abstract = df.loc['AB'].iloc[0]#在Refwork Tagged文献格式里面：AB [摘要内容]
               ===============================

                  可以根据需要增加标题/关键词等信息进行判断

               ===============================
    except KeyError:
        content.append("\nK1 没有摘要")
        print("K1 没有摘要\n")
        processed_ref_path = os.path.join(Tagged_Path, os.path.basename(ref_path))
        with open(processed_ref_path, "w", encoding='utf-8') as file:
            file.writelines(content)
        answer = "========没有摘要信息========\n"
        return answer
       
    # Construct user input
    user_input = f"\
    Read the abstract below and answer the questions based on the abstract:\
    1. Is this article studying humans? Answer No if it is non-human such as rats, mice, monkeys, etc. Answer Yes as long as the study is on human beings/human brain (only Yes, No) \
    2、Is the type of this article an experimental report, a review, or a meta-analysis? (only need to answer the type of article: Research, Meta, Review, Not sure)\
    3. Other Question (Only answer Yes, No, Not sure)\
    4、Other Question (Only answer Yes, No, Not sure)\
    5、Indicate the specific information of the article that made you make the judgement in the previous four questions, please quote the original article.\
        Abstract: '{abstract}'\#你可以让AI对上面的回答进行解释，为什么这么想的，以及它的参考信息，方面后面进行校对
    \
    The answer template is: \#给出一个答题模板
    Answer:\n\
    1. No\n\
    2. Research\n\
    3. Yes\n\
    4. Not sure\n\
    \
    判断依据：\n\
    问题1，文章中提到了研究对象是“20 right-handed healthy females”，这表明研究的是成年人，因此回答Yes。\n\
    问题2，文章中提到了“sham-controlled, single-blind crossover study using fMRI”，这表明进行了一项有对照、有盲法的实验研究，因此文章类型为Research。\n\
    问题3，\n\
    问题4，\n\
    \n\n\
    注!!!!! 如果未提供摘要或摘要不完整，请回答: **No Abstract** \n"#这里有的时候AI可能不一定看到（😓）
    
    # Send request
    client = OpenAI(
        api_key=Your_API_KEY,
        base_url="https://api.moonshot.cn/v1",# Kimi的API网址
    )

    # 准备对话历史和用户输入
    history = [
        {"role": "system", "content": "您是 Moonshot AI 提供的人工智能助手。"},
    ]
    messages = history + [{"role": "user", "content": user_input}]
    completion = client.chat.completions.create(
        model="moonshot-v1-8k",
        messages=messages,
        temperature=0.3,#数值越小，模型生成的文本越保守，更加倾向于选择最可能的词语或短语
    )
    answer = completion.choices[0].message.content
    # Process answer
    include_tag = 0
    if answer.find("**No Abstract**") != -1:
        answer = "========没有摘要信息========\n"
        print(f"======================= Answer ===========================\n {answer}\n")
        content.append("\nK1 没有摘要")
               ===============================

                  在Refwork Tagged文献格式里面：K1 [标签内容]
                                               NO <p>[笔记内容]</p>（&nbsp;代表空格）

               ===============================
        print("\nK1 没有摘要\n")
        include_tag = 1# 
        return answer
    else:
        print(f"======================= Answer ===========================\n {answer}\n")
        qa = re.findall(r'\d+\.\s*(.*)', answer)
        try:
            if qa[0] == 'No':
                content.append("\nK1 首筛排除-Not human")
                print("\nK1 首筛排除-Not human\n")
                include_tag = 1
            else:
                if qa[1] != 'Research':
                    content.append(f"\nK1 首筛排除-{qa[1]}")
                    print(f"\nK1 首筛排除-{qa[1]}\n")
                    include_tag = 1
               ===============================

                  这里都是你的Tag判定和Tag设置

               ===============================
        except:
            answer = "========没有摘要信息========\n"
            print(f"======================= Answer ===========================\n {answer}\n")
            content.append("\nK1 没有摘要")
            print("\nK1 没有摘要\n")
            include_tag = 1
            return answer
    if include_tag==0:
        content.append("\nK1 首筛纳入")
        print("\nK1 首筛纳入\n")
    Note = answer.replace(" ","&nbsp;")
    content.append(f"\nNO <p>{Note}</p>")
    # Write back to file

    processed_ref_path = os.path.join(r"S:\依瑞德\儿童MEP元分析\Case report_processed", os.path.basename(ref_path))
    with open(processed_ref_path, "w", encoding='utf-8') as file:
        file.writelines(content)
    return answer


ref_list = os.listdir(r"S:\依瑞德\儿童MEP元分析\Case report")
total_refs = len(ref_list)
start_index = int(input("Enter the start index: ")) # Specify the index to start processing from
ref_list = ref_list[start_index:]
total_refs -= start_index
current_ref_index = 0+start_index

for ref_name in ref_list:
    ref_path = os.path.join(r"S:\依瑞德\儿童MEP元分析\Case report", ref_name)
    print(f"======================= {ref_name} ===========================\n")
    answer = process_ref(ref_path)
    current_ref_index += 1
    print(f"======================= 处理进度：No.{current_ref_index} {current_ref_index-start_index}/{total_refs} ===========================\n")
    time.sleep(5)  # Wait for 5 seconds before processing the next ref
    with open(r"S:\依瑞德\儿童MEP元分析\Result_Case report.txt",'a', encoding='utf-8') as file:
        file.writelines(f"{ref_name}\n")
        file.writelines(answer)
        file.writelines("\n\n")
print("============= Congratulation! Finish! =================")
